name: Build & Deploy

on:
  push:
    paths-ignore:
    - LICENSE
    - README.md
    branches: master

jobs:
  build:
    name: build with sm${{ matrix.sm_version }} on ${{ matrix.os_short }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        sm_version:
          - "1.8"
          - "1.9"
          - "1.10"
          - "latest"
  
        include:
          - sm_version: latest
            sm_branch: master
            
          - sm_version: "1.8"
            sm_branch: "1.8-dev"
            
          - sm_version: "1.9"
            sm_branch: "1.9-dev"
            
          - sm_version: "1.10"
            sm_branch: "1.10-dev"
          
          - os: ubuntu-latest
            os_short: linux
          
          - os: windows-latest
            os_short: win
          
    steps:
      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y clang g++-multilib
          echo "::set-env name=CC::clang"
          echo "::set-env name=CXX::clang++"
          
      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          SET VSWHERE="C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere"
          
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`%VSWHERE% -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x86 -host_arch=x64
          )
          
          :: Loop over all environment variables and make them global using set-env.
          :: See: https://help.github.com/en/articles/development-tools-for-github-actions#set-an-environment-variable-set-env
          :: See: https://stackoverflow.com/questions/39183272/loop-through-all-environmental-variables-and-take-actions-depending-on-prefix
          setlocal
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo ::set-env name=%%a::%%b
          )
          endlocal
        
      - name: Checking out SourceMod
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/sourcemod
          ref: ${{ matrix.sm_branch }}
          path: sourcemod-${{ matrix.sm_version }}
          submodules: recursive
        
      - name: Checking out MM:Source
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/metamod-source
          ref: master
          path: metamod-latest
        
      - name: Checking out AMBuild
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/ambuild
          path: ambuild
        
      - name: Setting up Python
        uses: actions/setup-python@v2
        
      - name: Setting up ambuild
        working-directory: ambuild
        run: python setup.py install
        
      - name: Checking out hl2sdk-l4d2
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/hl2sdk
          ref: l4d2
          path: hl2sdk-l4d2
        
      - name: Checking out hl2sdk-l4d
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/hl2sdk
          ref: l4d
          path: hl2sdk-l4d
        
      - name: Checking out own repository
        uses: actions/checkout@v2
        with:
          path: sourcetvsupport
        
      - name: Compiling SourceTVSupport files
        working-directory: sourcetvsupport
        run: |
          mkdir build
          cd build
          python ../configure.py --enable-optimize --sm-path="${{ github.workspace }}/sourcemod-${{ matrix.sm_version }}" --mms-path="${{ github.workspace }}/metamod-latest"
          ambuild
        
      - name: Uploading package
        uses: actions/upload-artifact@v2
        with:
          name: sourcetvsupport-sm-${{ matrix.sm_version }}-${{ matrix.os_short }}
          path: sourcetvsupport/build/package
